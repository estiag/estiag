{"version":3,"file":"js/78.df2da1bf.js","mappings":"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","sources":["webpack://estiag/./src/assets/plugins/big.js","webpack://estiag/./src/views/ACCalc.vue","webpack://estiag/./src/views/ACCalc.vue?c533"],"sourcesContent":["/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n; (function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n    /************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,            // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n    /*\r\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n     * primitive number without a loss of precision.\r\n     */\r\n    STRICT = false,     // true or false\r\n\r\n\r\n    /**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        if (typeof n !== 'string') {\r\n          if (Big.strict === true && typeof n !== 'bigint') {\r\n            throw TypeError(INVALID + 'value');\r\n          }\r\n\r\n          // Minus zero?\r\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n        }\r\n\r\n        parse(x, n);\r\n      }\r\n\r\n      // Retain a reference to this Big constructor.\r\n      // Shadow Big.prototype.constructor which points to Object.\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.strict = STRICT;\r\n    Big.roundDown = 0;\r\n    Big.roundHalfUp = 1;\r\n    Big.roundHalfEven = 2;\r\n    Big.roundUp = 3;\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    if (!NUMERIC.test(n)) {\r\n      throw Error(INVALID + 'number');\r\n    }\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, sd, rm, more) {\r\n    var xc = x.c;\r\n\r\n    if (rm === UNDEFINED) rm = x.constructor.RM;\r\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (sd < 1) {\r\n      more =\r\n        rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n          rm === 1 && xc[0] >= 5 ||\r\n          rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n        );\r\n\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = x.e - sd + 1;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else if (sd < xc.length) {\r\n\r\n      // xc[sd] is the digit after the digit that may be rounded up.\r\n      more =\r\n        rm === 1 && xc[sd] >= 5 ||\r\n        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n        rm === 3 && (more || !!xc[0]);\r\n\r\n      // Remove any digits after the required precision.\r\n      xc.length = sd;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[--sd] > 9;) {\r\n          xc[sd] = 0;\r\n          if (sd === 0) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (sd = xc.length; !xc[--sd];) xc.pop();\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   */\r\n  function stringify(x, doExponential, isNonzero) {\r\n    var e = x.e,\r\n      s = x.c.join(''),\r\n      n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (doExponential) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n      // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) {\r\n        for (e -= n; e--;) s += '0';\r\n      } else if (e < n) {\r\n        s = s.slice(0, e) + '.' + s.slice(e);\r\n      }\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && isNonzero ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n   */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) {\r\n      y.s = k;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n    q.s = k;\r\n    k = p < 0 ? 0 : p;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n      p--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (yc[0]) {\r\n        y.s = -b;\r\n      } else if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = 1;\r\n      }\r\n      return y;\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big negated.\r\n   */\r\n  P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var e, k, t,\r\n      x = this,\r\n      Big = x.constructor;\r\n\r\n    y = new Big(y);\r\n\r\n    // Signs differ?\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (!yc[0]) {\r\n        if (xc[0]) {\r\n          y = new Big(x);\r\n        } else {\r\n          y.s = x.s;\r\n        }\r\n      }\r\n      return y;\r\n    }\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (e = xe - ye) {\r\n      if (e > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        e = -e;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; e--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    e = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (k) {\r\n      xc.unshift(k);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor('1'),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n      throw Error(INVALID + 'exponent');\r\n    }\r\n\r\n    if (isneg) n = -n;\r\n\r\n    for (; ;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.prec = function (sd, rm) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    return round(new this.constructor(this), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n   * using rounding mode rm, or Big.RM if rm is not specified.\r\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.round = function (dp, rm) {\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    return round(new this.constructor(this), dp + this.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big('0.5');\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) {\r\n      throw Error(NAME + 'No square root');\r\n    }\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s + '');\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) {\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = b;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), ++dp, rm);\r\n      for (; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, true, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n      // x.e may have changed if the value is rounded up.\r\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, false, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toJSON = P.toString = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Big as a primitve number.\r\n   */\r\n  P.toNumber = function () {\r\n    var n = Number(stringify(this, true, true));\r\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n      throw Error(NAME + 'Imprecise conversion');\r\n    }\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * rounding mode rm, or Big.RM if rm is not specified.\r\n   * Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      n = x.c[0];\r\n\r\n    if (sd !== UNDEFINED) {\r\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n        throw Error(INVALID + 'precision');\r\n      }\r\n      x = round(new Big(x), sd, rm);\r\n      for (; x.c.length < sd;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    if (Big.strict === true) {\r\n      throw Error(NAME + 'valueOf disallowed');\r\n    }\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n    // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n    //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);","<template xmlns=\"http://www.w3.org/1999/html\">\r\n  <div id=\"page-content\" class=\"header-static\">\r\n    <div class>\r\n      <form id=\"contact-form\">\r\n        <div class=\"submit-area padding-sm\">\r\n          <div class=\"row no-margin padding-onlytop-sm center\">\r\n            <div class=\"inline-block margin-lr-s\">\r\n              <div class=\"large-letter inline-block\">C</div>\r\n              <input class=\"sup\" type=\"number\" min=\"0\" v-model=\"cSup\" />\r\n              <input class=\"sub\" type=\"number\" min=\"0\" v-model=\"cSub\" />\r\n              <div class=\"inline-block large-letter equals\">=</div>\r\n              <div class=\"inline-block large-letter\" v-text=\"cResult\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row no-margin padding-onlytop-sm center\">\r\n            <div class=\"inline-block margin-lr-s\">\r\n              <div class=\"large-letter inline-block\">A</div>\r\n              <input class=\"sup\" type=\"number\" min=\"0\" v-model=\"aSup\" />\r\n              <input class=\"sub\" type=\"number\" min=\"0\" v-model=\"aSub\" />\r\n              <div class=\"inline-block large-letter equals\">=</div>\r\n              <div class=\"inline-block large-letter\" v-text=\"aResult\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Big } from '../assets/plugins/big.js'\r\n\r\nexport default {\r\n  data: function () {\r\n    return {\r\n      cSub: 0,\r\n      cSup: 0,\r\n      aSub: 0,\r\n      aSup: 0,\r\n      cResult: 0,\r\n      aResult: 0,\r\n    }\r\n  },\r\n  watch: {\r\n    cSub: function () {\r\n      this.calc()\r\n    },\r\n    cSup: function () {\r\n      this.calc()\r\n    },\r\n    aSub: function () {\r\n      this.calc()\r\n    },\r\n    aSup: function () {\r\n      this.calc()\r\n    },\r\n  },\r\n  computed: {},\r\n  methods: {\r\n    calc: function () {\r\n      if (this.cSub < 0) {\r\n        this.cSub = 0\r\n      }\r\n      if (this.cSup < 0) {\r\n        this.cSup = 0\r\n      }\r\n      if (this.aSub < 0) {\r\n        this.aSub = 0\r\n      }\r\n      if (this.aSup < 0) {\r\n        this.aSup = 0\r\n      }\r\n      if (this.cSub < this.cSup) {\r\n        this.cSub = this.cSup\r\n      }\r\n      if (this.aSub < this.aSup) {\r\n        this.aSub = this.aSup\r\n      }\r\n      var bf = new Big(this.fractorial(this.cSub))\r\n      var pf = new Big(this.fractorial(this.cSup))\r\n      var bmpf = new Big(this.fractorial(this.cSub - this.cSup))\r\n      this.cResult = bf.div(pf.times(bmpf))\r\n\r\n      this.aResult = new Big(this.fractorial(this.aSub)).div(\r\n        this.fractorial(this.aSub - this.aSup)\r\n      )\r\n    },\r\n    fractorial: function (n) {\r\n      if (n < 1) {\r\n        return new Big(1)\r\n      }\r\n      return new Big(n).times(this.fractorial(n - 1)) \r\n    },\r\n  },\r\n}\r\n</script>\r\n<style scoped>\r\n.container {\r\n  width: 80%;\r\n  margin: auto;\r\n}\r\n* {\r\n  font-size: 13px;\r\n}\r\n.equals {\r\n  left: -35px;\r\n  position: relative;\r\n}\r\n.large-letter {\r\n  font-size: 100px;\r\n}\r\n.sup {\r\n  position: relative;\r\n  top: -66px;\r\n  left: 6px;\r\n}\r\n.sub {\r\n  position: relative;\r\n  top: 0px;\r\n  left: -55px;\r\n}\r\n.input-height {\r\n  height: 64px;\r\n}\r\n\r\n.center {\r\n  text-align: center;\r\n}\r\n\r\n.align-top {\r\n  vertical-align: top;\r\n}\r\n\r\n.margin-bottom {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.text-right {\r\n  text-align: right;\r\n}\r\ninput {\r\n  width: 41px;\r\n}\r\n.margin-lr-s {\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n}\r\n</style>\r\n\r\n","import { render } from \"./ACCalc.vue?vue&type=template&id=58306510&scoped=true&xmlns=http%3A%2F%2Fwww.w3.org%2F1999%2Fhtml\"\nimport script from \"./ACCalc.vue?vue&type=script&lang=js\"\nexport * from \"./ACCalc.vue?vue&type=script&lang=js\"\n\nimport \"./ACCalc.vue?vue&type=style&index=0&id=58306510&scoped=true&lang=css\"\n\nimport exportComponent from \"D:\\\\workspace\\\\playground\\\\estiag\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-58306510\"]])\n\nexport default __exports__"],"names":["GLOBAL","Big","DP","RM","MAX_DP","MAX_POWER","NE","PE","STRICT","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","_Big_","n","x","this","s","e","c","slice","strict","TypeError","String","parse","constructor","prototype","roundDown","roundHalfUp","roundHalfEven","roundUp","i","nl","test","Error","charAt","indexOf","replace","search","substring","length","round","sd","rm","more","xc","unshift","pop","stringify","doExponential","isNonzero","join","abs","cmp","y","isneg","yc","j","k","l","div","a","b","dp","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","p","push","shift","eq","gt","gte","lt","lte","minus","sub","t","xlty","plus","xe","ye","reverse","mod","ygtx","times","neg","add","pow","one","prec","sqrt","half","Math","toExponential","mul","Array","toFixed","toJSON","toString","toNumber","Number","toPrecision","valueOf","define","id","class","_createElementVNode","_createElementBlock","_hoisted_7","type","min","_ctx","$event","_hoisted_8","_toDisplayString","_hoisted_12","_hoisted_13","data","cSub","cSup","aSub","aSup","cResult","aResult","watch","calc","computed","methods","bf","fractorial","pf","bmpf","__exports__","render"],"sourceRoot":""}